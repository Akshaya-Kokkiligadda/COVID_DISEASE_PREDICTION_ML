#Loading Libraries
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
import warnings
warnings.simplefilter(action = "ignore") 
#Loading Dataset
covid = pd.read_csv(r'C:\Users\bhanu\Desktop\REPORT\Covid Dataset.csv')
covid

Breathing Problem	Fever	Dry Cough	Sore throat	Running Nose	Asthma	Chronic Lung Disease	Headache	Heart Disease	Diabetes	...	Fatigue	Gastrointestinal	Abroad travel	Contact with COVID Patient	Attended Large Gathering	Visited Public Exposed Places	Family working in Public Exposed Places	Wearing Masks	Sanitization from Market	COVID-19
0	Yes	Yes	Yes	Yes	Yes	No	No	No	No	Yes	...	Yes	Yes	No	Yes	No	Yes	Yes	No	No	Yes
1	Yes	Yes	Yes	Yes	No	Yes	Yes	Yes	No	No	...	Yes	No	No	No	Yes	Yes	No	No	No	Yes
2	Yes	Yes	Yes	Yes	Yes	Yes	Yes	Yes	No	Yes	...	Yes	Yes	Yes	No	No	No	No	No	No	Yes
3	Yes	Yes	Yes	No	No	Yes	No	No	Yes	Yes	...	No	No	Yes	No	Yes	Yes	No	No	No	Yes
4	Yes	Yes	Yes	Yes	Yes	No	Yes	Yes	Yes	Yes	...	No	Yes	No	Yes	No	Yes	No	No	No	Yes
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
5429	Yes	Yes	No	Yes	Yes	Yes	Yes	No	No	No	...	Yes	Yes	No	No	No	No	No	No	No	Yes
5430	Yes	Yes	Yes	No	Yes	Yes	No	Yes	No	Yes	...	Yes	No	No	No	No	No	No	No	No	Yes
5431	Yes	Yes	Yes	No	No	No	No	No	Yes	No	...	No	No	No	No	No	No	No	No	No	No
5432	Yes	Yes	Yes	No	Yes	No	No	Yes	Yes	No	...	No	No	No	No	No	No	No	No	No	No
5433	Yes	Yes	Yes	No	Yes	Yes	No	Yes	No	Yes	...	Yes	No	No	No	No	No	No	No	No	No
5434 rows × 21 columns

#To check Null Value in Dataset
covid.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5434 entries, 0 to 5433
Data columns (total 21 columns):
 #   Column                                   Non-Null Count  Dtype 
---  ------                                   --------------  ----- 
 0   Breathing Problem                        5434 non-null   object
 1   Fever                                    5434 non-null   object
 2   Dry Cough                                5434 non-null   object
 3   Sore throat                              5434 non-null   object
 4   Running Nose                             5434 non-null   object
 5   Asthma                                   5434 non-null   object
 6   Chronic Lung Disease                     5434 non-null   object
 7   Headache                                 5434 non-null   object
 8   Heart Disease                            5434 non-null   object
 9   Diabetes                                 5434 non-null   object
 10  Hyper Tension                            5434 non-null   object
 11  Fatigue                                  5434 non-null   object
 12  Gastrointestinal                         5434 non-null   object
 13  Abroad travel                            5434 non-null   object
 14  Contact with COVID Patient               5434 non-null   object
 15  Attended Large Gathering                 5434 non-null   object
 16  Visited Public Exposed Places            5434 non-null   object
 17  Family working in Public Exposed Places  5434 non-null   object
 18  Wearing Masks                            5434 non-null   object
 19  Sanitization from Market                 5434 non-null   object
 20  COVID-19                                 5434 non-null   object
dtypes: object(21)
memory usage: 891.6+ KB
#To check columns name in dataset
covid.columns
Index(['Breathing Problem', 'Fever', 'Dry Cough', 'Sore throat',
       'Running Nose', 'Asthma', 'Chronic Lung Disease', 'Headache',
       'Heart Disease', 'Diabetes', 'Hyper Tension', 'Fatigue ',
       'Gastrointestinal ', 'Abroad travel', 'Contact with COVID Patient',
       'Attended Large Gathering', 'Visited Public Exposed Places',
       'Family working in Public Exposed Places', 'Wearing Masks',
       'Sanitization from Market', 'COVID-19'],
      dtype='object')
#To count number of Yes and No in Covide-19 column
covid['COVID-19'].value_counts()
Yes    4383
No     1051
Name: COVID-19, dtype: int64
#DATA VISUALIZATION
#Distribution of target variable
sns.countplot(x='COVID-19',data=covid)
<Axes: xlabel='COVID-19', ylabel='count'>

#Distribution of target variable (COVID-19) in percentage
covid["COVID-19"].value_counts().plot.pie(explode=[0.1,0.5],autopct='%1.2f%%',shadow=True)
plt.title('Percentage of COVID Positive')
Text(0.5, 1.0, 'Percentage of COVID Positive')

#Selecting features
features = covid.columns.tolist()
features.remove('COVID-19')
print(features)
['Breathing Problem', 'Fever', 'Dry Cough', 'Sore throat', 'Running Nose', 'Asthma', 'Chronic Lung Disease', 'Headache', 'Heart Disease', 'Diabetes', 'Hyper Tension', 'Fatigue ', 'Gastrointestinal ', 'Abroad travel', 'Contact with COVID Patient', 'Attended Large Gathering', 'Visited Public Exposed Places', 'Family working in Public Exposed Places', 'Wearing Masks', 'Sanitization from Market']
#FEATURE TRANSFORMATION
from sklearn.preprocessing import LabelEncoder
e=LabelEncoder()
covid['Breathing Problem']=e.fit_transform(covid['Breathing Problem'])
covid['Fever']=e.fit_transform(covid['Fever'])
covid['Dry Cough']=e.fit_transform(covid['Dry Cough'])
covid['Sore throat']=e.fit_transform(covid['Sore throat'])
covid['Running Nose']=e.fit_transform(covid['Running Nose'])
covid['Asthma']=e.fit_transform(covid['Asthma'])
covid['Chronic Lung Disease']=e.fit_transform(covid['Chronic Lung Disease'])
covid['Headache']=e.fit_transform(covid['Headache'])
covid['Heart Disease']=e.fit_transform(covid['Heart Disease'])
covid['Diabetes']=e.fit_transform(covid['Diabetes'])
covid['Hyper Tension']=e.fit_transform(covid['Hyper Tension'])
covid['Abroad travel']=e.fit_transform(covid['Abroad travel'])
covid['Contact with COVID Patient']=e.fit_transform(covid['Contact with COVID Patient'])
covid['Attended Large Gathering']=e.fit_transform(covid['Attended Large Gathering'])
covid['Visited Public Exposed Places']=e.fit_transform(covid['Visited Public Exposed Places'])
covid['Family working in Public Exposed Places']=e.fit_transform(covid['Family working in Public Exposed Places'])
covid['Wearing Masks']=e.fit_transform(covid['Wearing Masks'])
covid['Sanitization from Market']=e.fit_transform(covid['Sanitization from Market'])
covid['COVID-19']=e.fit_transform(covid['COVID-19'])
covid['Dry Cough']=e.fit_transform(covid['Dry Cough'])
covid['Sore throat']=e.fit_transform(covid['Sore throat'])
covid['Gastrointestinal ']=e.fit_transform(covid['Gastrointestinal '])
covid['Fatigue ']=e.fit_transform(covid['Fatigue '])
covid.head()
Breathing Problem	Fever	Dry Cough	Sore throat	Running Nose	Asthma	Chronic Lung Disease	Headache	Heart Disease	Diabetes	...	Fatigue	Gastrointestinal	Abroad travel	Contact with COVID Patient	Attended Large Gathering	Visited Public Exposed Places	Family working in Public Exposed Places	Wearing Masks	Sanitization from Market	COVID-19
0	1	1	1	1	1	0	0	0	0	1	...	1	1	0	1	0	1	1	0	0	1
1	1	1	1	1	0	1	1	1	0	0	...	1	0	0	0	1	1	0	0	0	1
2	1	1	1	1	1	1	1	1	0	1	...	1	1	1	0	0	0	0	0	0	1
3	1	1	1	0	0	1	0	0	1	1	...	0	0	1	0	1	1	0	0	0	1
4	1	1	1	1	1	0	1	1	1	1	...	0	1	0	1	0	1	0	0	0	1
5 rows × 21 columns

#Checking Null Value
covid.isnull()
Breathing Problem	Fever	Dry Cough	Sore throat	Running Nose	Asthma	Chronic Lung Disease	Headache	Heart Disease	Diabetes	...	Fatigue	Gastrointestinal	Abroad travel	Contact with COVID Patient	Attended Large Gathering	Visited Public Exposed Places	Family working in Public Exposed Places	Wearing Masks	Sanitization from Market	COVID-19
0	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
1	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
2	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
3	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
4	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
5429	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
5430	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
5431	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
5432	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
5433	False	False	False	False	False	False	False	False	False	False	...	False	False	False	False	False	False	False	False	False	False
5434 rows × 21 columns

covid.dtypes.value_counts()
int32    19
int64     2
dtype: int64
covid.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5434 entries, 0 to 5433
Data columns (total 21 columns):
 #   Column                                   Non-Null Count  Dtype
---  ------                                   --------------  -----
 0   Breathing Problem                        5434 non-null   int32
 1   Fever                                    5434 non-null   int32
 2   Dry Cough                                5434 non-null   int64
 3   Sore throat                              5434 non-null   int64
 4   Running Nose                             5434 non-null   int32
 5   Asthma                                   5434 non-null   int32
 6   Chronic Lung Disease                     5434 non-null   int32
 7   Headache                                 5434 non-null   int32
 8   Heart Disease                            5434 non-null   int32
 9   Diabetes                                 5434 non-null   int32
 10  Hyper Tension                            5434 non-null   int32
 11  Fatigue                                  5434 non-null   int32
 12  Gastrointestinal                         5434 non-null   int32
 13  Abroad travel                            5434 non-null   int32
 14  Contact with COVID Patient               5434 non-null   int32
 15  Attended Large Gathering                 5434 non-null   int32
 16  Visited Public Exposed Places            5434 non-null   int32
 17  Family working in Public Exposed Places  5434 non-null   int32
 18  Wearing Masks                            5434 non-null   int32
 19  Sanitization from Market                 5434 non-null   int32
 20  COVID-19                                 5434 non-null   int32
dtypes: int32(19), int64(2)
memory usage: 488.3 KB
#FINDING THE CORRELATION BETWEEN FEATURES
correlation=covid.corr()
correlation.style.background_gradient(cmap='PiYG',axis=None)
 	Breathing Problem	Fever	Dry Cough	Sore throat	Running Nose	Asthma	Chronic Lung Disease	Headache	Heart Disease	Diabetes	Hyper Tension	Fatigue	Gastrointestinal	Abroad travel	Contact with COVID Patient	Attended Large Gathering	Visited Public Exposed Places	Family working in Public Exposed Places	Wearing Masks	Sanitization from Market	COVID-19
Breathing Problem	1.000000	0.089903	0.159562	0.303768	0.055190	0.075318	-0.098291	-0.062172	-0.073366	0.055427	0.045256	0.000561	-0.075390	0.117795	0.214634	0.200304	0.066688	0.018295	nan	nan	0.443764
Fever	0.089903	1.000000	0.127580	0.322235	0.081758	0.073953	-0.025160	-0.035416	-0.031462	0.050286	0.079001	-0.060458	-0.008067	0.128726	0.164704	0.070490	0.002252	0.012102	nan	nan	0.352891
Dry Cough	0.159562	0.127580	1.000000	0.213907	-0.030763	0.086843	-0.043664	-0.035912	0.047566	-0.006593	0.081989	-0.039909	0.008251	0.331418	0.128330	0.117963	0.086176	0.163102	nan	nan	0.464292
Sore throat	0.303768	0.322235	0.213907	1.000000	0.039450	0.081377	-0.050440	-0.015971	0.002177	0.001938	0.042811	-0.023290	0.025886	0.205986	0.189251	0.216438	0.079055	0.104378	nan	nan	0.502848
Running Nose	0.055190	0.081758	-0.030763	0.039450	1.000000	-0.022763	-0.014376	0.068479	-0.056750	0.042961	-0.020445	0.007026	-0.014673	0.034526	0.003776	0.061099	0.032568	-0.061323	nan	nan	-0.005657
Asthma	0.075318	0.073953	0.086843	0.081377	-0.022763	1.000000	-0.033771	0.037064	0.076783	-0.012060	0.017707	0.006564	0.101909	0.068286	0.005046	-0.044592	0.020941	-0.115679	nan	nan	0.089930
Chronic Lung Disease	-0.098291	-0.025160	-0.043664	-0.050440	-0.014376	-0.033771	1.000000	-0.050480	-0.039860	0.046789	-0.010331	-0.047655	-0.050333	-0.088854	-0.062482	-0.020548	-0.093049	0.038343	nan	nan	-0.056837
Headache	-0.062172	-0.035416	-0.035912	-0.015971	0.068479	0.037064	-0.050480	1.000000	0.048471	0.032390	-0.207489	0.052035	0.097778	0.043589	-0.082101	-0.162992	-0.005790	-0.012625	nan	nan	-0.027793
Heart Disease	-0.073366	-0.031462	0.047566	0.002177	-0.056750	0.076783	-0.039860	0.048471	1.000000	-0.032956	0.049139	-0.058925	0.004121	-0.020761	-0.025593	-0.045437	0.086169	0.035000	nan	nan	0.027072
Diabetes	0.055427	0.050286	-0.006593	0.001938	0.042961	-0.012060	0.046789	0.032390	-0.032956	1.000000	0.042543	-0.043903	0.040651	0.039013	-0.085696	-0.061650	-0.078212	0.097696	nan	nan	0.040627
Hyper Tension	0.045256	0.079001	0.081989	0.042811	-0.020445	0.017707	-0.010331	-0.207489	0.049139	0.042543	1.000000	-0.027605	-0.067972	-0.016382	0.027307	0.002911	0.019174	0.048152	nan	nan	0.102575
Fatigue	0.000561	-0.060458	-0.039909	-0.023290	0.007026	0.006564	-0.047655	0.052035	-0.058925	-0.043903	-0.027605	1.000000	0.009356	-0.068401	-0.027383	-0.031058	-0.009562	-0.025623	nan	nan	-0.044188
Gastrointestinal	-0.075390	-0.008067	0.008251	0.025886	-0.014673	0.101909	-0.050333	0.097778	0.004121	0.040651	-0.067972	0.009356	1.000000	0.099577	0.025277	-0.017251	-0.061885	-0.027603	nan	nan	-0.003367
Abroad travel	0.117795	0.128726	0.331418	0.205986	0.034526	0.068286	-0.088854	0.043589	-0.020761	0.039013	-0.016382	-0.068401	0.099577	1.000000	0.080210	0.113399	0.069609	0.143094	nan	nan	0.443875
Contact with COVID Patient	0.214634	0.164704	0.128330	0.189251	0.003776	0.005046	-0.062482	-0.082101	-0.025593	-0.085696	0.027307	-0.027383	0.025277	0.080210	1.000000	0.234649	0.079800	0.006909	nan	nan	0.357122
Attended Large Gathering	0.200304	0.070490	0.117963	0.216438	0.061099	-0.044592	-0.020548	-0.162992	-0.045437	-0.061650	0.002911	-0.031058	-0.017251	0.113399	0.234649	1.000000	0.083795	0.063776	nan	nan	0.390145
Visited Public Exposed Places	0.066688	0.002252	0.086176	0.079055	0.032568	0.020941	-0.093049	-0.005790	0.086169	-0.078212	0.019174	-0.009562	-0.061885	0.069609	0.079800	0.083795	1.000000	0.028486	nan	nan	0.119755
Family working in Public Exposed Places	0.018295	0.012102	0.163102	0.104378	-0.061323	-0.115679	0.038343	-0.012625	0.035000	0.097696	0.048152	-0.025623	-0.027603	0.143094	0.006909	0.063776	0.028486	1.000000	nan	nan	0.160208
Wearing Masks	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan
Sanitization from Market	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan	nan
COVID-19	0.443764	0.352891	0.464292	0.502848	-0.005657	0.089930	-0.056837	-0.027793	0.027072	0.040627	0.102575	-0.044188	-0.003367	0.443875	0.357122	0.390145	0.119755	0.160208	nan	nan	1.000000
#Removing unnecessary features
covid=covid.drop('Running Nose',axis=1)
covid=covid.drop('Asthma',axis=1)
covid=covid.drop('Chronic Lung Disease',axis=1)
covid=covid.drop('Headache',axis=1)
covid=covid.drop('Heart Disease',axis=1)
covid=covid.drop('Diabetes',axis=1)
covid=covid.drop('Fatigue ',axis=1)
covid=covid.drop('Gastrointestinal ',axis=1)
covid=covid.drop('Wearing Masks',axis=1)
covid=covid.drop('Sanitization from Market',axis=1)
cov = covid
cov.head()
Breathing Problem	Fever	Dry Cough	Sore throat	Hyper Tension	Abroad travel	Contact with COVID Patient	Attended Large Gathering	Visited Public Exposed Places	Family working in Public Exposed Places	COVID-19
0	1	1	1	1	1	0	1	0	1	1	1
1	1	1	1	1	0	0	0	1	1	0	1
2	1	1	1	1	0	1	0	0	0	0	1
3	1	1	1	0	0	1	0	1	1	0	1
4	1	1	1	1	1	0	1	0	1	0	1
#Correlation after removing unnecessary features
correlation=cov.corr()
correlation.style.background_gradient(cmap='PiYG',axis=None)
 	Breathing Problem	Fever	Dry Cough	Sore throat	Hyper Tension	Abroad travel	Contact with COVID Patient	Attended Large Gathering	Visited Public Exposed Places	Family working in Public Exposed Places	COVID-19
Breathing Problem	1.000000	0.089903	0.159562	0.303768	0.045256	0.117795	0.214634	0.200304	0.066688	0.018295	0.443764
Fever	0.089903	1.000000	0.127580	0.322235	0.079001	0.128726	0.164704	0.070490	0.002252	0.012102	0.352891
Dry Cough	0.159562	0.127580	1.000000	0.213907	0.081989	0.331418	0.128330	0.117963	0.086176	0.163102	0.464292
Sore throat	0.303768	0.322235	0.213907	1.000000	0.042811	0.205986	0.189251	0.216438	0.079055	0.104378	0.502848
Hyper Tension	0.045256	0.079001	0.081989	0.042811	1.000000	-0.016382	0.027307	0.002911	0.019174	0.048152	0.102575
Abroad travel	0.117795	0.128726	0.331418	0.205986	-0.016382	1.000000	0.080210	0.113399	0.069609	0.143094	0.443875
Contact with COVID Patient	0.214634	0.164704	0.128330	0.189251	0.027307	0.080210	1.000000	0.234649	0.079800	0.006909	0.357122
Attended Large Gathering	0.200304	0.070490	0.117963	0.216438	0.002911	0.113399	0.234649	1.000000	0.083795	0.063776	0.390145
Visited Public Exposed Places	0.066688	0.002252	0.086176	0.079055	0.019174	0.069609	0.079800	0.083795	1.000000	0.028486	0.119755
Family working in Public Exposed Places	0.018295	0.012102	0.163102	0.104378	0.048152	0.143094	0.006909	0.063776	0.028486	1.000000	0.160208
COVID-19	0.443764	0.352891	0.464292	0.502848	0.102575	0.443875	0.357122	0.390145	0.119755	0.160208	1.000000
cov.head()
Breathing Problem	Fever	Dry Cough	Sore throat	Hyper Tension	Abroad travel	Contact with COVID Patient	Attended Large Gathering	Visited Public Exposed Places	Family working in Public Exposed Places	COVID-19
0	1	1	1	1	1	0	1	0	1	1	1
1	1	1	1	1	0	0	0	1	1	0	1
2	1	1	1	1	0	1	0	0	0	0	1
3	1	1	1	0	0	1	0	1	1	0	1
4	1	1	1	1	1	0	1	0	1	0	1
#DATA SPLITTING
x=cov.drop('COVID-19',axis=1)
y=cov['COVID-19']
#Train-Test Split Validation (Ratio 75:25)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state=0)
print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)
(4075, 10) (1359, 10) (4075,) (1359,)
def print_score(clf, X_train, y_train, X_test, y_test, train=True):
    if train:
        pred = clf.predict(X_train)
        clf_report = pd.DataFrame(classification_report(y_train, pred, output_dict=True))
        print("Train Result:\n================================================")
        print(f"Accuracy Score: {accuracy_score(y_train, pred) * 100:.2f}%")
        print("_______________________________________________")
        print(f"CLASSIFICATION REPORT:\n{clf_report}")
        print("_______________________________________________")
        print(f"Confusion Matrix: \n {confusion_matrix(y_train, pred)}\n")
        
    elif train==False:
        pred = clf.predict(X_test)
        clf_report = pd.DataFrame(classification_report(y_test, pred, output_dict=True))
        print("Test Result:\n================================================")        
        print(f"Accuracy Score: {accuracy_score(y_test, pred) * 100:.2f}%")
        print("_______________________________________________")
        print(f"CLASSIFICATION REPORT:\n{clf_report}")
        print("_______________________________________________")
        print(f"Confusion Matrix: \n {confusion_matrix(y_test, pred)}\n")
#logistic regression
lr_clf = LogisticRegression()
lr_clf.fit(X_train, y_train)

print_score(lr_clf, X_train, y_train, X_test, y_test, train=True)
print_score(lr_clf, X_train, y_train, X_test, y_test, train=False)
Train Result:
================================================
Accuracy Score: 96.52%
_______________________________________________
CLASSIFICATION REPORT:
                    0            1  accuracy    macro avg  weighted avg
precision    0.893204     0.983390  0.965153     0.938297      0.965906
recall       0.931646     0.973212  0.965153     0.952429      0.965153
f1-score     0.912020     0.978274  0.965153     0.945147      0.965430
support    790.000000  3285.000000  0.965153  4075.000000   4075.000000
_______________________________________________
Confusion Matrix: 
 [[ 736   54]
 [  88 3197]]

Test Result:
================================================
Accuracy Score: 96.32%
_______________________________________________
CLASSIFICATION REPORT:
                    0            1  accuracy    macro avg  weighted avg
precision    0.895131     0.979853  0.963208     0.937492      0.963582
recall       0.915709     0.974499  0.963208     0.945104      0.963208
f1-score     0.905303     0.977169  0.963208     0.941236      0.963367
support    261.000000  1098.000000  0.963208  1359.000000   1359.000000
_______________________________________________
Confusion Matrix: 
 [[ 239   22]
 [  28 1070]]

2.Decision tree
dt_clf = DecisionTreeClassifier()
dt_clf.fit(X_train, y_train)

print_score(dt_clf, X_train, y_train, X_test, y_test, train=True)
print_score(dt_clf, X_train, y_train, X_test, y_test, train=False)
Train Result:
================================================
Accuracy Score: 97.57%
_______________________________________________
CLASSIFICATION REPORT:
                    0            1  accuracy    macro avg  weighted avg
precision    0.939009     0.984489  0.975706     0.961749      0.975672
recall       0.935443     0.985388  0.975706     0.960416      0.975706
f1-score     0.937223     0.984938  0.975706     0.961080      0.975688
support    790.000000  3285.000000  0.975706  4075.000000   4075.000000
_______________________________________________
Confusion Matrix: 
 [[ 739   51]
 [  48 3237]]

Test Result:
================================================
Accuracy Score: 97.13%
_______________________________________________
CLASSIFICATION REPORT:
                    0            1  accuracy    macro avg  weighted avg
precision    0.926923     0.981802  0.971302     0.954362      0.971262
recall       0.923372     0.982696  0.971302     0.953034      0.971302
f1-score     0.925144     0.982249  0.971302     0.953696      0.971281
support    261.000000  1098.000000  0.971302  1359.000000   1359.000000
_______________________________________________
Confusion Matrix: 
 [[ 241   20]
 [  19 1079]]

3.random forest classifier
rf_clf = RandomForestClassifier()
rf_clf.fit(X_train, y_train)

print_score(rf_clf, X_train, y_train, X_test, y_test, train=True)
print_score(rf_clf, X_train, y_train, X_test, y_test, train=False)
Train Result:
================================================
Accuracy Score: 97.57%
_______________________________________________
CLASSIFICATION REPORT:
                    0            1  accuracy    macro avg  weighted avg
precision    0.939009     0.984489  0.975706     0.961749      0.975672
recall       0.935443     0.985388  0.975706     0.960416      0.975706
f1-score     0.937223     0.984938  0.975706     0.961080      0.975688
support    790.000000  3285.000000  0.975706  4075.000000   4075.000000
_______________________________________________
Confusion Matrix: 
 [[ 739   51]
 [  48 3237]]

Test Result:
================================================
Accuracy Score: 97.13%
_______________________________________________
CLASSIFICATION REPORT:
                    0            1  accuracy    macro avg  weighted avg
precision    0.926923     0.981802  0.971302     0.954362      0.971262
recall       0.923372     0.982696  0.971302     0.953034      0.971302
f1-score     0.925144     0.982249  0.971302     0.953696      0.971281
support    261.000000  1098.000000  0.971302  1359.000000   1359.000000
_______________________________________________
Confusion Matrix: 
 [[ 241   20]
 [  19 1079]]

TESTING
new = X_test.iloc[0]
a = np.asarray(new)
a = a.reshape(1,-1)
p = lr_clf.predict(a)
if (p[0] == 1):
    print("Person is affected by Covid 19 and is at risk of dying")
else:
    print("Great! the results are negative and you don't have to worry")
Person is affected by Covid 19 and is at risk of dying
